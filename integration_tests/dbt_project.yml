
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'sf_project_admin_integration_tests'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'default'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"

### VARIABLES - These override the ones in the package
vars:
  useradmin_role: TEST_USERADMIN
  # useradmin_role - the role used to create roles and users - needs privilege to create the object
  
  creator_role: TEST_SYSADMIN
  # creator_role - the role used to create databases and warehouses - needs privilege to create the object
  
  owner_role: PRJ_SYSADMIN
  # owner_role - the role who will get ownership of the created object - no privileges needed 
  #            - usually the EXECUTOR role for the dbt user, so that it can create schemata & other objects inside
  
  shared_dev_wh: TEST_SHARED_DEV_WH
  # shared_dev_wh - the shared development warehouse to assign to developers in addition to the project warehouse
  #                 The idea is that it is more cost efficient for many developers to share a single DEV WH
  #                 than each DEV using the specific WH for the project she's working on at the moment.

  reporting_wh: TEST_REPORTING_WH
  # reporting_wh - an example of extra warehouse

  dev_env_names: ['DEV', 'XDEV']
  # dev_env_names - a list of environment to be considered at "DEVELOPMENT" level, where DEVELOPER role have read/write privileges
  #                 In "NON DEVELOPMENT" environments the DEVELOPER role has only read privileges


# Configuring models - Full documentation: https://docs.getdbt.com/docs/configuring-models
models:
  sf_project_admin_integration_tests:
    +materialized: table
