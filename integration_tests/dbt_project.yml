
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'sf_project_admin_integration_tests'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'default'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"

### VARIABLES - These override the ones in the package
vars:
  project_short_name: SAMPLE   # <<-- Define a short name as a prefix for the resources of your project
  # project_short_name  - The prefix used to create the project resources (DB, WH, roles...)
  #                     - This should be a short name that clearly identifies your project and sorts it in the right place as a prefix.
  #                     - this is not the (unique) dbt project name as in the first line of this file, that is available in the "project_name" context variable

  environments: ['DEV', 'QA', 'PROD']
  # environments        - The list of environment names in use in this project

  ### SF Admin VARIABLES - These override the default ones set in the package
  useradmin_role: TEST_USERADMIN
  # useradmin_role - the role used to create roles and users - needs privilege to create these objects
  
  creator_role: TEST_SYSADMIN
  # creator_role - the role used to create databases and warehouses - needs privilege to create these objects
  
  # future_grants_role: SECURITYADMIN   # !! Uncomment/Redefine if you want to be able to grant future grants to RO role.
  # future_grants_role - the role used to grant future usage and select on DB objects for RO functional roles
  #                    - these future objects are not granted if no future_grants_role is defined
  #                    - if you provide a role it must be able to grant future objects and 
  #                    - the user running the setup script must be able to impersonate it.

  owner_role: PRJ_SYSADMIN   # !! You probably want to override the default (SYSADMIN)
  # owner_role - the role who will get ownership of the created objects for the project and parent of the project roles
  #            - by providing your own role for a project or project group you define a project scoped SYSADMIN
  #            - that can granted to people in the DEV team, even if the full SYSADMIN cannot be granted,
  #            - and can also be used for other administration tasks.
  
  single_WH: True
  # single_WH - Wheter to create and use a single WH for all environments, if true, or one for each environment, if false.
  #           - Warehouse naming is controlled by the get_warehouse_name(...) macro where single_WH is a parameter to control 
  #           - the name generation.

  dev_env_names: ['DEV', 'XDEV']
  # dev_env_names - a list of environment to be considered at "DEVELOPMENT" level, where DEVELOPER role have read/write privileges
  #                 In "NON DEVELOPMENT" environments the DEVELOPER role has only read privileges

  initial_pw: "{{ env_var('DBT_ENV_SECRET_INITIAL_PW', 'Ch4ng3.M3') }}"
  # initial_pw - The initial password to assign to users when created. 
  #            - While it MUST be changed after the user creation, it should come from ENV vars and not a string here.

  # shared_dev_wh: TEST_SHARED_DEV_WH
  # shared_dev_wh - the shared development warehouse to assign to developers in addition to the project warehouse
  #                 The idea is that it is more cost efficient for many developers to share a single DEV WH
  #                 than each DEV using the specific WH for the project she's working on at the moment.

  # reporting_wh: TEST_REPORTING_WH
  # reporting_wh - an example of extra warehouse

# Configuring models - Full documentation: https://docs.getdbt.com/docs/configuring-models
models:
  sf_project_admin_integration_tests:
    +materialized: table
